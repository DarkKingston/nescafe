<?php

/**
 * @file
 * No Referrer module.
 */

use Drupal\Core\Link;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Url;

/**
 * Implements hook_link_alter().
 *
 * @phpstan-ignore-next-line Hook implementations should not duplicate @param
 * documentation.
 */
function noreferrer_link_alter(array &$variables): void {
  $config = \Drupal::config('noreferrer.settings');
  if (isset($variables['options']['attributes']['rel']) && is_string($variables['options']['attributes']['rel'])) {
    $variables['options']['attributes']['rel'] = explode(' ', $variables['options']['attributes']['rel']);
  }
  if ($config->get('noopener') && isset($variables['options']['attributes']['target']) && $variables['options']['attributes']['target'] !== '') {
    $variables['options']['attributes']['rel'][] = 'noopener';
  }
  if ($config->get('noreferrer') && $variables['url']->isExternal() && !noreferrer_is_allowed($variables['url']->toString())) {
    $variables['options']['attributes']['rel'][] = 'noreferrer';
  }
}

/**
 * Helper function to determine if a host is in the domain allowlist.
 */
function noreferrer_is_allowed(string $url): bool {
  $allowed_domains = \Drupal::config('noreferrer.settings')->get('allowed_domains');
  if (!$allowed_domains) {
    return FALSE;
  }
  $domains = array_filter(explode(' ', $allowed_domains));
  $host = parse_url($url, PHP_URL_HOST);
  if (!$host) {
    return FALSE;
  }
  foreach ($domains as $domain) {
    if (!strcasecmp($domain, $host) || strripos($host, '.' . $domain) === strlen($host) - strlen($domain) - 1) {
      return TRUE;
    }
  }
  return FALSE;
}

/**
 * Implements hook_cron().
 */
function noreferrer_cron(): void {
  if ($url = \Drupal::config('noreferrer.settings')->get('subscribe_url')) {
    noreferrer_subscribe($url);
  }
}

/**
 * Retrieves allowlist from external URL.
 */
function noreferrer_subscribe(string $url): void {
  try {
    $response = \Drupal::httpClient()->get($url);
  }
  catch (Exception $e) {
    \Drupal::logger('noreferrer')->error('Error received at %url while retrieving domain allowlist: %message.', [
      '%url' => $url,
      '%message' => $e->getMessage(),
    ]);
    return;
  }
  $allowed_domains = json_decode((string) $response->getBody());
  if (is_array($allowed_domains)) {
    \Drupal::configFactory()->getEditable('noreferrer.settings')
      ->set('allowed_domains', implode(' ', $allowed_domains))
      ->save();
  }
  else {
    \Drupal::logger('noreferrer')->error('Unable to extract valid data from %url while retrieving domain allowlist.', ['%url' => $url]);
  }
}

/**
 * Implements hook_help().
 *
 * @phpstan-ignore-next-line Hook implementations should not duplicate @return
 * documentation.
 */
function noreferrer_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.noreferrer':
      // Generate 3 paragraphs.
      $output = array_fill(0, 3, ['#type' => 'html_tag', '#tag' => 'p']);
      $output[0]['#value'] = t('No Referrer module allows you to add the <code>rel="noopener"</code> and <code>rel="noreferrer"</code> link types to both links in user-generated content and links generated by code.');
      $output[1]['#value'] = t('To apply the configured link types to user-generated content, simply enable the <em>Add rel="noopener" and/or rel="noreferrer" to links</em> filter on your text formats.');
      // Mozilla documentation will auto-redirect to correct language.
      $output[2][] = Link::fromTextAndUrl(t('Read more about link types.'), Url::fromUri('https://developer.mozilla.org/docs/Web/HTML/Link_types', ['attributes' => ['target' => '_blank']]))->toRenderable();
      return $output;

    case 'noreferrer.settings':
      return t('Link types enabled below will be added to links generated by code, such as link fields and menu items, as well as links in user-generated content using the <em>Add rel="noopener" and/or rel="noreferrer" to links</em> filter.');
  }
}
