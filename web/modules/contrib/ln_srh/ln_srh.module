<?php

use Drupal\ln_srh\Form\SRHConnectionSettings;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Url;
use Drupal\ln_srh\SRHConstants;

/**
 * Implements hook_module_preinstall().
 *
 * Allow config to be rewritten before a module is installed.
 */
function ln_srh_module_preinstall($module) {
  if(in_array($module,SRHConstants::SRH_MODULES)){
    \Drupal::service('ln_srh.config_replacer')->rewriteModuleConfig($module);
  }
}

/**
 * Implements hook_module_preuninstall().
 */
function ln_srh_module_preuninstall($module) {
  if(in_array($module,SRHConstants::SRH_MODULES)){
    \Drupal::service('ln_srh.config_replacer')->rewriteModuleConfig($module,'original');
  }
}

/**
 * Implements hook_cron().
 */
function ln_srh_cron() {
  $srh_connection_settings = \Drupal::config(SRHConnectionSettings::SETTINGS);
  if ($srh_connection_settings->get('enable_sync')) {
    $current_time = \Drupal::time()->getRequestTime();
    $timeSync = \Drupal::state()->get('ln_srh_recipes_last_sync',0);
    $next_execution_time = $timeSync + $srh_connection_settings->get('interval_time');
    if ($current_time > $next_execution_time) {
      /** @var \Drupal\ln_srh\Services\SRHUtils $srh_utils */
      $srh_utils = \Drupal::service('ln_srh.utils');
      $srh_utils->syncRecipes();
      \Drupal::state()->set('ln_srh_recipes_last_sync', $current_time);
    }
  }
}

/**
 * Implements hook_entity_operation_alter().
 */
function ln_srh_entity_operation_alter(array &$operations, EntityInterface $entity) {
  if($entity->getEntityTypeId() == 'node' && $entity->bundle() == \Drupal\ln_srh\SRHConstants::SRH_RECIPE_BUNDLE){
    $operations['srh_syncro'] = [
      'title' => t('SRH Sync'),
      'weight' => 100,
      'url' => Url::fromRoute('ln_srh.sync',['node' => $entity->id()])
    ];
  }
}

/**
 * Implements hook_theme().
 */
function ln_srh_theme($existing, $type, $theme, $path){
  return [
    'srh_progress_circle' => [
      'template'  => 'srh-progress-circle',
      'variables' => [
        'value' => 0,
        'limit' => 0,
      ]
    ],
    'field__srh_entity_reference_grid' => [
      'template' => 'field--srh-entity-reference-grid',
      'base hook' => 'field--srh-entity-reference-grid'
    ],
    'field__srh_entity_reference_revision_grid' => [
      'template' => 'field--srh-entity-reference-revision-grid',
      'base hook' => 'field--srh-entity-reference-revision-grid'
    ]
  ];
}


/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function ln_srh_theme_suggestions_field_alter(array &$suggestions, array $variables){
  $formatter = $variables['element']['#formatter'] ?? '';
  $gridFormatters = ['srh_entity_reference_revision_grid' ,'srh_entity_reference_grid'];
  if(!empty($formatter) && in_array($formatter,$gridFormatters) ){
    $suggestions = ["field__{$formatter}"] + $suggestions;
  }
}
