<?php

use Drupal\Core\Entity\EntityStorageException;
use Drupal\Core\Config\FileStorage;
use Drupal\ln_srh\Form\SRHFieldMapping;
use Drupal\ln_srh\Services\ConfigReplaceInterface;
use Drupal\user\Entity\Role;
use Symfony\Component\Yaml\Yaml;
use Drupal\node\Entity\NodeType;
use Drupal\ln_srh\SRHConstants;

function ln_srh_full_install() {
  _ln_srh_full_enable_lets_cook_it_flag();
  _ln_srh_full_enable_process_complement();
}

function _ln_srh_full_enable_lets_cook_it_flag() {
  // Check if flag module is enabled.
  $moduleHandler = \Drupal::service('module_handler');
  if (!$moduleHandler->moduleExists('flag')) {
    // Install flag.
    $installer = \Drupal::service('module_installer');
    $installer->install(['flag']);
  }

  $module_path = drupal_get_path('module', 'ln_srh_full');
  $config_rewrite_path = $module_path . '/config/rewrite';

  /** @var   ConfigReplaceInterface $rewriteConfigHelper */
  $rewriteConfigHelper = \Drupal::service('ln_srh.config_replacer');

  // Create flag.
  $source = new FileStorage($module_path . '/config/optional');
  $config_storage = \Drupal::service('config.storage');
  $config_storage->write('flag.flag.srh_lets_cook_it', $source->read('flag.flag.srh_lets_cook_it'));
  $configFactory = \Drupal::configFactory();

  // Add flag to srh_recipe view display.
  $recipeViewDisplayConfig = 'core.entity_view_display.node.srh_recipe.default';
  $rewrite = Yaml::parse(file_get_contents($config_rewrite_path . DIRECTORY_SEPARATOR . $recipeViewDisplayConfig . '.yml'));
  $config = $configFactory->getEditable($recipeViewDisplayConfig);
  $original_data = $config->getRawData();
  $rewrite = $rewriteConfigHelper->rewriteConfig($original_data, $rewrite, $recipeViewDisplayConfig, 'ln_srh_full');
  // Save the rewritten configuration data.
  $config->setData($rewrite)->save();

  // Grant flag permissions.
  $role = Role::load('anonymous');
  $role->grantPermission('flag srh_lets_cook_it');
  $role->save();
  $role = Role::load('authenticated');
  $role->grantPermission('flag srh_lets_cook_it');
  $role->save();
}

function _ln_srh_full_enable_process_complement() {
  /** @var \Drupal\Core\Config\Config $config */
  $config = \Drupal::service('config.factory')
    ->getEditable(SRHFieldMapping::SETTINGS);
  $config->set(SRHConstants::SRH_COMPLEMENT_BUNDLE . '.path', [
    'enable_mapping' => 1,
    'plugin' => [
      'id' => 'srh_process_alias',
    ],
  ]);
  $config->set(SRHConstants::SRH_COMPLEMENT_BUNDLE . '.field_srh_media_gallery', [
    'enable_mapping' => 1,
    'plugin' => [
      'id' => 'srh_process_gallery',
    ],
  ]);
  $config->set(SRHConstants::SRH_COMPLEMENT_BUNDLE . '.field_srh_ingredients', [
    'enable_mapping' => 1,
    'plugin' => [
      'id' => 'srh_process_ingredients_full',
    ],
  ]);
  $config->set(SRHConstants::SRH_COMPLEMENT_BUNDLE . '.field_srh_nutrients', [
    'enable_mapping' => 1,
    'plugin' => [
      'id' => 'srh_process_nutrients_extended',
    ],
  ]);
  $config->save();
}

function ln_srh_full_update_8001(&$sandbox) {
  $module_path = drupal_get_path('module','ln_srh_full');
  /** @var   ConfigReplaceInterface $rewriteConfigHelper */
  $rewriteConfigHelper = \Drupal::service('ln_srh.config_replacer');

  // Create Paragraph bundle srh_step_group
  $rewriteConfigHelper->createParagraphTypeConfigByYml($module_path . '/config/install/paragraphs.paragraphs_type.srh_step_group.yml');
  // Create field field_srh_recipe_steps_ids for paragraph storage
  $rewriteConfigHelper->createFieldStorageConfigByYml($module_path . '/config/install/field.storage.paragraph.field_srh_recipe_steps_ids.yml');
  // Create field field_srh_recipe_steps_ids for paragraph srh_step_group
  $rewriteConfigHelper->createFieldConfigByYml($module_path . '/config/install/field.field.paragraph.srh_step_group.field_srh_recipe_steps_ids.yml');
  // Add field field_srh_recipe_steps_ids to display form
  $rewriteConfigHelper->addFieldToEntityFormDisplayConfigByYml($module_path . '/config/install/core.entity_form_display.paragraph.srh_step_group.default.yml','field_srh_recipe_steps_ids','field.field.paragraph.srh_step_group.field_srh_recipe_steps_ids');
  // Create field field_c_title for paragraph srh_step_group
  $rewriteConfigHelper->createFieldConfigByYml($module_path . '/config/install/field.field.paragraph.srh_step_group.field_c_title.yml');
  // Add field field_c_title to display form
  $rewriteConfigHelper->addFieldToEntityFormDisplayConfigByYml($module_path . '/config/install/core.entity_form_display.paragraph.srh_step_group.default.yml','field_c_title','field.field.paragraph.srh_step_group.field_c_title');


  // Create field field_srh_recipe_step_id for paragraph storage
  $rewriteConfigHelper->createFieldStorageConfigByYml($module_path . '/config/install/field.storage.paragraph.field_srh_recipe_step_id.yml');
  // Create field field_srh_recipe_step_id for paragraph srh_step
  $rewriteConfigHelper->createFieldConfigByYml($module_path . '/config/install/field.field.paragraph.srh_step.field_srh_recipe_step_id.yml');
  // Add field field_srh_recipe_step_id to display form
  $rewriteConfigHelper->addFieldToEntityFormDisplayConfigByYml($module_path . '/config/rewrite/core.entity_form_display.paragraph.srh_step.default.yml','field_srh_recipe_step_id','field.field.paragraph.srh_step.field_srh_recipe_step_id');

  // Create field field_srh_steps_groups for node storage
  $rewriteConfigHelper->createFieldStorageConfigByYml($module_path . '/config/install/field.storage.node.field_srh_steps_groups.yml');
  // Create field field_srh_steps_groups for node srh_recipe
  $rewriteConfigHelper->createFieldConfigByYml($module_path . '/config/install/field.field.node.srh_recipe.field_srh_steps_groups.yml');
  // Add field field_srh_steps_groups to display form
  $rewriteConfigHelper->addFieldToEntityFormDisplayConfigByYml($module_path . '/config/rewrite/core.entity_form_display.node.srh_recipe.default.yml','field_srh_steps_groups','field.field.node.srh_recipe.field_srh_steps_groups');

  // Enable mapping steps groups
  /** @var \Drupal\Core\Config\Config $config */
  $config = \Drupal::service('config.factory')->getEditable(SRHFieldMapping::SETTINGS);
  $config->set(SRHConstants::SRH_RECIPE_BUNDLE . '.field_srh_steps_groups', [
    'enable_mapping' => 1,
    'plugin' => [
      'id' => 'srh_process_steps_groups'
    ],
  ]);
  $field_srh_steps_map = $config->get('field_srh_steps');
  if(isset($field_srh_steps_map['enable_mapping']) && $field_srh_steps_map['enable_mapping']){
    $config->set(SRHConstants::SRH_RECIPE_BUNDLE . '.field_srh_steps', [
      'enable_mapping' => 1,
      'plugin' => [
        'id' => 'srh_process_steps_full'
      ],
    ]);
  }
  $config->save();
}


/**
 * Create Field field_srh_translations on SRH Recipe
 */
function ln_srh_full_update_8002(&$sandbox) {
  /** @var   ConfigReplaceInterface $rewriteConfigHelper */
  $module_path = drupal_get_path('module','ln_srh_full');
  $rewriteConfigHelper = \Drupal::service('ln_srh.config_replacer');
  // Create field field_srh_translations for node storage

  $rewriteConfigHelper->createFieldStorageConfigByYml($module_path . '/config/install/field.storage.node.field_srh_translations.yml');
  // Create field field_srh_translations for node srh_recipe
  $rewriteConfigHelper->createFieldConfigByYml($module_path . '/config/install/field.field.node.srh_recipe.field_srh_translations.yml');
  // Add field field_srh_translations to display form
  $rewriteConfigHelper->addFieldToEntityFormDisplayConfigByYml($module_path . '/config/rewrite/core.entity_form_display.node.srh_recipe.default.yml','field_srh_translations','field.field.node.srh_recipe.field_srh_translations');

  // Enable mapping steps groups
  /** @var \Drupal\Core\Config\Config $config */
  $config = \Drupal::service('config.factory')->getEditable(SRHFieldMapping::SETTINGS);
  $config->set(SRHConstants::SRH_RECIPE_BUNDLE . '.field_srh_translations', [
    'enable_mapping' => 1,
    'plugin' => [
      'id' => 'srh_process_translations'
    ],
  ]);
  $config->save();
}

/**
 * Create Field field_srh_nutritional_db_id on SRH Recipe Ingredients
 */
function ln_srh_full_update_8003(&$sandbox) {
  $module_path = drupal_get_path('module','ln_srh_full');
  /** @var   ConfigReplaceInterface $rewriteConfigHelper */
  $rewriteConfigHelper = \Drupal::service('ln_srh.config_replacer');
  // Create field field_srh_nutritional_db_id for paragraph storage
  $rewriteConfigHelper->createFieldStorageConfigByYml($module_path . '/config/install/field.storage.paragraph.field_srh_nutritional_db_id.yml');
  // Create field field_srh_nutritional_db_id for paragraph srh_ingredient
  $rewriteConfigHelper->createFieldConfigByYml($module_path . '/config/install/field.field.paragraph.srh_ingredient.field_srh_nutritional_db_id.yml');
  // Add field field_srh_nutritional_db_id to display form
  $rewriteConfigHelper->addFieldToEntityFormDisplayConfigByYml($module_path . '/config/rewrite/core.entity_form_display.paragraph.srh_ingredient.default.yml','field_srh_nutritional_db_id','field.field.paragraph.srh_ingredient.field_srh_nutritional_db_id');
}

/**
 * Create Let's cook it flag and add it to view display.
 */
function ln_srh_full_update_8004(&$sandbox) {
  _ln_srh_full_enable_lets_cook_it_flag();
}

/**
 * Create content type SRH Complement
 */
function ln_srh_full_update_8005(&$sandbox) {
  $module_path = drupal_get_path('module','ln_srh_full');
  /** @var   ConfigReplaceInterface $rewriteConfigHelper */
  $rewriteConfigHelper = \Drupal::service('ln_srh.config_replacer');

  // Create content type.
  $yml = Yaml::parse(file_get_contents($module_path . '/config/install/node.type.srh_complement.yml'));

  try {
    NodeType::create($yml)->save();
    \Drupal::messenger()->addStatus(t('The @bundle content type has been created successfully.',['@bundle' => $yml['name']]));
  } catch (EntityStorageException $e) {
    \Drupal::messenger()->addError(t('An error occurred while creating the @bundle content type.',['@bundle' => $yml['name']]));
  }

  // Create SRH Complement fields.
  $fields = ['field_srh_ingredients', 'field_srh_media_gallery', 'field_srh_nutrients', 'field_srh_id', 'body'];
  foreach($fields as $field) {
    $rewriteConfigHelper->createFieldConfigByYml($module_path . '/config/install/field.field.node.srh_complement.' . $field . '.yml');
  }

  $rewriteConfigHelper->createEntityFormDisplayByYml($module_path . '/config/install/core.entity_form_display.node.srh_complement.default.yml');
  $rewriteConfigHelper->createEntityViewDisplayByYml($module_path . '/config/install/core.entity_view_display.node.srh_complement.default.yml');

  // Add mappings
  _ln_srh_full_enable_process_complement();

  // Import system.action.srh_complement_sync.yml
  $entity_type_manager = \Drupal::entityTypeManager();
  $config_install_path = $module_path . '/config/install';
  $storage = new FileStorage($config_install_path);
  $entity_type_manager
    ->getStorage('action')
    ->create($storage->read('system.action.srh_complement_sync'))
    ->trustData()
    ->save();
}

/**
 * Create Field field_srh_media on ingredient.
 */
function ln_srh_full_update_8006(&$sandbox) {
  // Do nothing if field already exists
  $all_bundle_fields = \Drupal::service('entity_field.manager')->getFieldDefinitions('paragraph', 'srh_ingredient');
  if (isset($all_bundle_fields['field_srh_media'])) {
    return;
  }

  $module_path = drupal_get_path('module','ln_srh_full');
  $configFactory = \Drupal::configFactory();
  /** @var \Drupal\ln_srh\Services\ConfigReplace $configReplaceHelper */
  $configReplaceHelper = \Drupal::service('ln_srh.config_replacer');
  // Create Field field_srh_media on ingredient.
  $configReplaceHelper->createFieldConfigByYml($module_path . '/config/install/field.field.paragraph.srh_ingredient.field_srh_media.yml');
  $configReplaceHelper->addFieldToEntityFormDisplayConfigByYml($module_path . '/config/rewrite/core.entity_form_display.paragraph.srh_ingredient.default.yml','field_srh_media','field.field.paragraph.srh_ingredient.field_srh_media');

  // Add field_srh_media to paragraph.srh_ingredient.full view display.
  $ingredientViewDisplayConfig = 'core.entity_view_display.paragraph.srh_ingredient.full';
  $config_rewrite_path = $module_path . '/config/rewrite';
  $rewrite = Yaml::parse(file_get_contents($config_rewrite_path . DIRECTORY_SEPARATOR . $ingredientViewDisplayConfig . '.yml'));
  $config = $configFactory->getEditable($ingredientViewDisplayConfig);
  $original_data = $config->getRawData();
  $rewrite = $configReplaceHelper->rewriteConfig($original_data, $rewrite, $ingredientViewDisplayConfig, 'ln_srh_full');
  // Save the rewritten configuration data.
  $config->setData($rewrite)->save();
}
/**
 * Check new dependencies field_group and flag
 */
function ln_srh_full_update_9101() {
  if (!\Drupal::moduleHandler()->moduleExists('field_group')) {
    \Drupal::service('module_installer')->install(['field_group']);
    return t('SRH has installed core "Field group" module.');
  }
  if (!\Drupal::moduleHandler()->moduleExists('flag')) {
    \Drupal::service('module_installer')->install(['flag']);
    return t('SRH has installed core "Flag" module.');
  }

}
