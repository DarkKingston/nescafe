<?php

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Language\LanguageInterface;
use Drupal\Core\Url;

/**
 * Implements hook_library_info_alter().
 */
function ln_notification_library_info_alter(&$libraries, $extension) {
  // Add required drupalSettings values for the ln_notification/lib library.
  if ($extension === 'ln_notification' && isset($libraries['lib'])) {
    $language_none = \Drupal::languageManager()->getLanguage(LanguageInterface::LANGCODE_NOT_APPLICABLE);
    $config = \Drupal::config('ln_notification.settings');
    $firebase_config = \Drupal::service('ln_notification')->getFirebaseConfig();
    $settings = [
      'serviceWorkerUrl' => '/firebase-messaging-sw.js',
      'apiUrl' => '/ln-notification/subscription',
      'firebaseConfig' => $firebase_config,
      'vapidKey' => $config->get('firebase_vap_id'),
      'firebaseVersion' => $config->get('firebase_version'),
      'firebaseEndpoint' => $config->get('firebase_endpoint'),
    ];

    $libraries['lib']['drupalSettings']['lnNotification'] = $settings;
  }
}

/**
 * Implements hook_form_alter().
 */
function ln_notification_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  switch ($form_id) {
    case 'notification_system_dispatch_usersettings':
      // Add webpush configuration to the DispatchUserSettings form.
      $classes = ' hidden';

      if ($form['dispatcher_webpush']['#default_value'] == true) {
        $classes = '';
      }

      $form['dispatcher_webpush']['#suffix'] = '<div class="notification-system-dispatch-fcm'. $classes .'"></div>';
      $form['#attached']['library'][] = 'ln_notification/usersettings_block';
      break;
    case 'notification_system_dispatch_settings':
      $form['default_enabled_dispatchers']['fcm']['#disabled'] = true;
      break;
  }
}


/**
 * Implements hook_theme().
 */
function ln_notification_theme($existing, $type, $theme, $path) {
  return [
    'ln_notification_fcm_popup' => [
      'variables' => [
        'info' => NULL,
        'button_enable' => NULL,
        'button_later' => NULL,
        'button_cancel' => NULL,
        'ask_later_days' => NULL,
      ],
    ],
  ];
}

/**
 * Implements hook_page_attachments_alter().
 * 
 * Add manifest.json to html head
 *
 * @param array $attachments
 */
function ln_notification_page_attachments_alter(&$attachments) {
  $config = \Drupal::config('ln_notification.settings');

  // Quit early if module settings have not been set up 
  if (empty($config->get())) {
    return;
  }
  
  $manifest_link = [
    '#tag' => 'link',
    '#attributes' => [
      'rel' => 'manifest',
      'href' => Url::fromRoute('ln_notification.manifest')->toString(),
    ],
  ];
  $cross_origin = $config->get('firebase_enable_authorized');
  // Pass credentials if the site is behind HTTP auth.
  if ($cross_origin) {
    $manifest_link['#attributes']['crossorigin'] = 'use-credentials';
  }
  $attachments['#attached']['html_head'][] = [$manifest_link, 'manifest'];
}

/**
 * Implements hook_entity_type_build().
 *
 * Register all form modes for nodes.
 *
 * This is copied from "forms_steps" module.
 * @see https://git.drupalcode.org/project/forms_steps/blob/d6618ad1383dffbe1cd9ab52f28cd7425b8a4721/src/Service/FormsStepsManager.php#L225-250
 *
 * @see forms_steps_entity_type_build()
 */
function ln_notification_entity_type_build(array &$entity_types) {
  /** @var EntityDisplayRepository $entity_display_repository */
  $entity_display_repository = \Drupal::service('entity_display.repository');

  $all_form_modes = [];
  $form_modes = $entity_display_repository->getFormModes('notification');

  foreach ($form_modes as $key => $value) {
    if (!empty($key) && $value['targetEntityType'] === 'notification') {
      $all_form_modes['notification'][] = $key;
    }
  }

  // We parse each entity type.
  foreach ($all_form_modes as $entity_type_id => $form_modes) {
    // We parse and set each form_mode.
    foreach ($form_modes as $form_mode) {
      $entity_types[$entity_type_id]->setFormClass(
        $form_mode,
        'Drupal\notification_system_database\Form\NotificationForm'
      );
    }
  }
}

/**
 * Implements hook_cron().
 */
function ln_notification_cron() {
  $ln_notification_manager = \Drupal::service('ln_notification.manager');
  $ln_notification_manager->processScheduled();
}