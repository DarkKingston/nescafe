<?php

namespace Drupal\ln_notification\Entity;

use Drupal\Core\Entity\EntityStorageInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Entity\ContentEntityBase;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Url;
use Drupal\user\UserInterface;
use function t;

/**
 * Defines the entity type.
 *
 * @ContentEntityType(
 *   id = "fcm_subscription",
 *   label = @Translation("FCM Subscription"),
 *   base_table = "fcm_subscriptions",
 *   admin_permission = "administer fcm subscriptions",
 *   handlers = {
 *     "storage" = "Drupal\ln_notification\Entity\FCMSubscriptionStorage",
 *     "list_builder" = "Drupal\ln_notification\Entity\FCMSubscriptionListBuilder",
 *     "storage_schema" = "Drupal\ln_notification\Entity\FCMSubscriptionStorageSchema",
 *   },
 *   entity_keys = {
 *     "id" = "id",
 *     "uuid" = "uuid",
 *   },
 *   links = {
 *     "collection" = "/admin/config/services/ln-notification/subscriptions",
 *   },
 * )
 */
class FCMSubscription extends ContentEntityBase implements FCMSubscriptionInterface {

  /**
   * {@inheritdoc}
   */
  public function getOwner(): ?UserInterface {
    return $this->get('uid')->entity;
  }

  /**
   * {@inheritdoc}
   */
  public function getCreatedDate(): \DateTimeInterface {
    return new \DateTime('@' . $this->get('created')->value);
  }

  /**
   * {@inheritdoc}
   */
  public function getChangedDate(): \DateTimeInterface {
    return new \DateTime('@' . $this->get('changed')->value);
  }

  /**
   * {@inheritdoc}
   */
  public function getUserAgent(): string {
    return $this->get('user_agent')->value;
  }

  /**
   * {@inheritdoc}
   */
  public function getUserTimeZone(): \DateTimeZone {
    return new \DateTimeZone('+' . \abs($this->get('utc_offset')->value));
  }

  /**
   * {@inheritdoc}
   */
  public function getToken(): ?string {
    return $this->get('token')->value;
  }

  /**
   * {@inheritdoc}
   */
  public function preSave(EntityStorageInterface $storage) {
    if (!$this->isNew()) {
      $uid_new = (int) $this->uid->target_id;
      $uid_old = (int) $this->original->uid->target_id;

      // A subscription that has had the owner cannot become anonymous.
      if ($uid_old !== 0 && $uid_new === 0) {
        $this->set('uid', $uid_old);
      }

      $this->set('created', $this->original->created->value);
      $this->set('changed', \Drupal::time()->getRequestTime());
    }

    parent::preSave($storage);
  }

  /**
   * {@inheritdoc}
   */
  public static function baseFieldDefinitions(EntityTypeInterface $entity_type): array {
    $fields = parent::baseFieldDefinitions($entity_type);

    $fields['user_agent'] = BaseFieldDefinition::create('string')
      ->setLabel(t('User agent'))
      ->setRequired(TRUE)
      ->setReadOnly(TRUE)
      ->setInternal(TRUE)
      ->setSetting('max_length', 512)
      ->setDescription(t('The user agent of a browser that created/changed the subscription.'));

    $fields['token'] = BaseFieldDefinition::create('string')
      ->setLabel(t('Authentication token'))
      ->setRequired(TRUE)
      ->setReadOnly(TRUE)
      ->setSetting('unique_key', TRUE)
      ->setDescription(t('Unique device token generated by FCM'));

    $fields['created'] = BaseFieldDefinition::create('created')
      ->setLabel(t('Authored on'))
      ->setRequired(TRUE)
      ->setReadOnly(TRUE)
      ->setDescription(t('The time the subscription was created.'));

    $fields['changed'] = BaseFieldDefinition::create('changed')
      ->setLabel(t('Changed'))
      ->setRequired(TRUE)
      ->setReadOnly(TRUE)
      ->setDescription(t('The time the subscription was last edited.'));

    $fields['utc_offset'] = BaseFieldDefinition::create('integer')
      ->setLabel(t('UTC offset'))
      ->setRequired(TRUE)
      ->setReadOnly(TRUE)
      ->setDescription(t('The UTC offset in hours.'));

    $fields['uid'] = BaseFieldDefinition::create('entity_reference')
      ->setLabel(t('Authored by'))
      ->setRequired(TRUE)
      ->setReadOnly(TRUE)
      ->setSetting('target_type', 'user')
      // By default a subscription belongs to the anonymous user.
      ->setDefaultValue(0)
      ->setDescription(t('The username of the content author.'));

    return $fields;
  }

}
