{#
/**
 * @file
 * Theme override to display a single page.
 *
 * The doctype, html, head and body tags are not in this template. Instead they
 * can be found in the html.html.twig template in this directory.
 *
 * Available variables:
 *
 * General utility variables:
 * - base_path: The base URL path of the Drupal installation. Will usually be
 *   "/" unless you have installed Drupal in a sub-directory.
 * - is_front: A flag indicating if the current page is the front page.
 * - logged_in: A flag indicating if the user is registered and signed in.
 * - is_admin: A flag indicating if the user has permission to access
 *   administration pages.
 *
 * Site identity:
 * - front_page: The URL of the front page. Use this instead of base_path when
 *   linking to the front page. This includes the language domain or prefix.
 *
 * Page content (in order of occurrence in the default page.html.twig):
 * - node: Fully loaded node, if there is an automatically-loaded node
 *   associated with the page and the node ID is the second argument in the
 *   page's path (e.g. node/12345 and node/12345/revisions, but not
 *   comment/reply/12345).
 *
 * Regions:
 * - page.header: Items for the header region.
 * - page.primary_menu: Items for the primary menu region.
 * - page.secondary_menu: Items for the secondary menu region.
 * - page.highlighted: Items for the highlighted content region.
 * - page.help: Dynamic help text, mostly for admin pages.
 * - page.content: The main content of the current page.
 * - page.sidebar_first: Items for the first sidebar.
 * - page.sidebar_second: Items for the second sidebar.
 * - page.footer: Items for the footer region.
 * - page.breadcrumb: Items for the breadcrumb region.
 *
 * @see template_preprocess_page()
 * @see html.html.twig
 */
#}
<div class="layout-container">

  <header class="page__navbar">
    <div class="navbar">
      <div class="navbar__container container">
        <div class="navbar_left">
          <div class="navbar__branding">
            <a href="/">
              <img class="navbar__logo" src="/{{ directory }}/images/logo.svg" />
            </a>
          </div>
          {{ page.navbar_left }}
        </div>
        <div class="navbar_right">
          {{ page.navbar_right }}
        </div>
      </div>
    </div>
    <div class="mobile_menu">
      {{ page.navbar_left }}
      <button class="close_menu">X</button>
    </div>
  </header>

  <main role="main">
    <a id="main-content" tabindex="-1"></a>{# link is in html.html.twig #}
    <div class="layout-content">
      <div class="container">
        <div class="map_content">
          {{ page.points }}
        </div>
      </div>
    </div>{# /.layout-content #}
  </main>
  <footer role="contentinfo">
    <div class="container">
      {{ page.footer }}
    </div>
    {{ attach_library('nescafe/jquery') }}
    <script src="/{{ directory }}/js/script.js"></script>
  </footer>
</div>{# /.layout-container #}

<script src="https://polyfill.io/v3/polyfill.min.js?features=default"></script>
<script>
    /**
     * @license
     * Copyright 2019 Google LLC. All Rights Reserved.
     * SPDX-License-Identifier: Apache-2.0
     */
    // The following example creates complex markers to indicate beaches near
    // Sydney, NSW, Australia. Note that the anchor is set to (0,32) to correspond
    // to the base of the flagpole.
    function initMap() {
        const map = new google.maps.Map(document.getElementById("map"), {
            zoom: 10,
            center: { lat: 47.3456761152688, lng: 28.559704817610477 },
        });

        setMarkers(map);
    }

    // Data for the markers consisting of a name, a LatLng and a zIndex for the
    // order in which these markers should display on top of each other.
    const beaches = [
        ["Orașul Edineț", 48.17015843470841, 27.30448581277663, 6],
        ["Orașul Cahul", 45.905459239020445, 28.194165997427962, 5],
        ["Orașul Bălți", 47.784316422062425, 27.92505121792432, 4],
        ["Orașul Comrat", 46.307130047610556, 28.657260912116733, 3],
        ["Orașul Chișinău", 47.00734022586018, 28.780486265878775, 2],
        ["Orașul Chișinău", 46.983945957556806, 28.865820037293457, 1],
    ];

    function setMarkers(map) {
        // Adds markers to the map.
        // Marker sizes are expressed as a Size of X,Y where the origin of the image
        // (0,0) is located in the top left of the image.
        // Origins, anchor positions and coordinates of the marker increase in the X
        // direction to the right and in the Y direction down.
        const image = {
            url: "https://stag-yxxbuhy-qkl3gjov7gxou.eu-5.platformsh.site/sites/default/files/2023-06/pin.png",
            // This marker is 20 pixels wide by 32 pixels high.
            size: new google.maps.Size(20, 32),
            // The origin for this image is (0, 0).
            origin: new google.maps.Point(0, 0),
            // The anchor for this image is the base of the flagpole at (0, 32).
            anchor: new google.maps.Point(0, 32),
        };
        // Shapes define the clickable region of the icon. The type defines an HTML
        // <area> element 'poly' which traces out a polygon as a series of X,Y points.
        // The final coordinate closes the poly by connecting to the first coordinate.
        const shape = {
            coords: [1, 1, 1, 20, 18, 20, 18, 1],
            type: "poly",
        };

        for (let i = 0; i < beaches.length; i++) {
            const beach = beaches[i];

            new google.maps.Marker({
                position: { lat: beach[1], lng: beach[2] },
                map,
                icon: image,
                shape: shape,
                title: beach[0],
                zIndex: beach[3],
            });
        }
    }

    window.initMap = initMap;
</script>
<script
  src="https://maps.googleapis.com/maps/api/js?key=AIzaSyB83tmFmQPhdDZCLF-vHW4QCmwAPKcO66o&callback=initMap&v=weekly"
  defer
></script>
